// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String   @unique
  username  String?
  xp        Int      @default(0)
  level     Int      @default(1)
  streak    Int      @default(0)
  longestStreak  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActive DateTime?
  votes     Vote[]
  votesS1   VoteS1[]
  artVotes  ArtVote[]
  discordId String?
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  social      Social?
  metadata    Json?    // Will store { likes: number, dislikes: number, voters: number }
  votes       Vote[]
  tags        String[] @default([])
  deleted     Boolean  @default(false)
  deletedAt   DateTime?
}

model Vote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String   @db.ObjectId
  votedDate  DateTime @default(now())
  type       String   @default("like") // "like" or "dislike"
}


model ProjectS1 {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  social      Social?
  metadata    Json?    // Will store { likes: number, dislikes: number, voters: number }
  votes       VoteS1[]
  tags        String[] @default([])
  deleted     Boolean  @default(false)
  deletedAt   DateTime?
}

model VoteS1 {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  project    ProjectS1?  @relation(fields: [projectId], references: [id])
  projectId  String   @db.ObjectId
  votedDate  DateTime @default(now())
  type       String   @default("like") // "like" or "dislike"
}

type Social {
  twitter          String?
  discord          String?
  telegram         String?
  website          String?
  dexscreener      String?
  contractAddress  String?
}

model AdminSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  voteLock  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtSubmission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  artistAddress String
  artistName   String?
  discordId    String?
  title        String
  description  String?
  artworkUrl   String
  cohort       Int      @default(1)
  prompt       String   // e.g. "Wolfi", "Yield Yak", etc.
  status       String   @default("pending") // "pending", "approved", "rejected"
  votesReceived Int     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  votes        ArtVote[]
}

model ArtVote {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  submissionId String   @db.ObjectId
  submission   ArtSubmission @relation(fields: [submissionId], references: [id])
  cohort       Int
  createdAt    DateTime @default(now())
}

model CoffeeDonation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  recipientAddress String
  recipientName   String
  recipientAvatar String?
  donorAddress    String
  amount          Float
  message         String?
  transactionHash String?
  createdAt       DateTime @default(now())
}

model Board {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // e.g., "gen", "meme", "defi"
  title       String   // e.g., "General AVAX"
  description String
  createdAt   DateTime @default(now())
  totalThreadsCreated Int @default(0) // All-time thread count for unlock tracking
  threads     Thread[]
}

model Thread {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  boardId     String   @db.ObjectId
  board       Board    @relation(fields: [boardId], references: [id])
  subject     String?  // Optional thread title
  bumpedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  replyCount  Int      @default(0)
  posts       Post[]
}

model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  threadId      String   @db.ObjectId
  thread        Thread   @relation(fields: [threadId], references: [id])
  comment       String
  imageHash     String?  // Optional IPFS hash or image URL
  walletAddress String
  posterId      String   // Unique ID per wallet per board
  isOp          Boolean  @default(false)
  anonymous     Boolean  @default(true) // Whether to hide wallet/discord info
  createdAt     DateTime @default(now())
}
